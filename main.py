from telegram import *
from telegram.ext import *
import os
import json
import random

TOKEN = ""

photos_dir = "photos"
database_file = "database.json"
os.makedirs(photos_dir, exist_ok=True)


def load_db():
    if not os.path.exists(database_file):
        return []
    with open(database_file, "r", encoding="utf-8") as f:
        return json.load(f)


def save_db(data):
    with open(database_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    memes = load_db()

    if not memes:
        await update.message.reply_text("–ü–†–û–°–¢–ò–¢–ò –ü–û–ö–ê –ù–≠–¢ –ú–≠–ú–ò–í")
        return

    meme = random.choice(memes)

    if not os.path.exists(meme["file_path"]):
        await update.reply_text("–û—à–∏–±–∫–∞ –º–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–∑–≤–∏–Ω–∏—Ç–∏")
        return

    await update.message.reply_photo(photo=open(meme["file_path"], "rb"), \
                                     caption=f"–û–ø–∏—Å–∞–Ω–∏–µ:{meme['descrition']}")


def load_db_anecdots():
    if not os.path.exists("databaseanekdots.json"):
        return []
    with open("databaseanekdots.json", "r", encoding="utf-8") as f:
        return json.load(f)


def save_db_anecdots(data):
    with open("databaseanekdots.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


async def send_random_anecdot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    anekdot = load_db_anecdots()

    if not anekdot:
        await update.message.reply_text("–ü–†–û–°–¢–ò–¢–ò –ü–û–ö–ê –ù–≠–¢ –ê–ù–ï–ö–î–û–¢–ò–í")
        return

    anekdot = random.choice(anekdot)

    await update.message.reply_text(anekdot["anekdot_text"])


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await  update.message.reply_text("–ü–†–ò–í–ï–ï–ï–ï–¢ –Ø –¢–í–û–ô –ë–û–¢ –ë–£–î–£ –î–ï–õ–ê–¢–¨ –ú–ï–ú–ò")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await  update.message.reply_text("1.	–ï—Å—Ç—å –∫–∞–∫–∞—è —Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã–º —Å –º–µ–º–∞–º–∏, –∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.\n\
2.	–°–æ–≤–º–µ—Å—Ç–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å —Å —Ñ–æ—Ç–æ.\n\
3.	–ü—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞\n\
4.	–ú–µ–º-–±–∞—Ç—Ç–ª\n")


async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await  update.message.reply_text("–≠–¢–û –ö–ê–°–¢–û–ú–ù–ê–Ø –ö–û–ú–ê–ù–î–ê")


async def show_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [["üòÇ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º", "üòú–ê–Ω–µ–∫–¥–æ—Ç", "üí®Meme-BATTLEüí®"],
               ["üö®–ü–æ–º–æ—â—å", "üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
               ["üëô–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"]
               ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–∫–æ–ª", reply_markup=reply_markup)


async def handle_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üòÇ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º":
<<<<<<< HEAD
        await send_random_meme(update, context)
    elif text == "üòú–ê–Ω–µ–∫–¥–æ—Ç":
        await send_random_anecdot(update, context)
    elif text == "üí®Meme-BATTLEüí®":
        await start_meme_battle(update, context)
=======
        await send_random_meme(update=update, context=ContextTypes.DEFAULT_TYPE)
>>>>>>> origin/master
    elif text == "üëô–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É":
        await update.message.reply_text("–ò–î–ò –ù–ê–§–ò–ì!!!!!1", reply_markup=ReplyKeyboardRemove())


async def start_meme_battle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.user_data.get(f'{user_id}_meme_battle_active', False):
        await update.message.reply_text("–ë–∞—Ç—Ç–ª —É–∂–µ –∏–¥–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–∏—Ä–∞—Ç—å!")
        return

    all_memes_data = load_db()
    all_meme_paths = [meme["file_path"] for meme in all_memes_data if os.path.exists(meme["file_path"])]

    if len(all_meme_paths) < 2:
        await update.message.reply_text("–î–ª—è –±–∞—Ç—Ç–ª–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –º–µ–º–∞! üò¢")
        return

    await update.message.reply_text("üî•üî•üî• MEME BATTLE –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø! üî•üî•üî•")

    context.user_data[f'{user_id}_meme_battle_active'] = True
    context.user_data[f"{user_id}_meme_battle_candidates"] = all_meme_paths.copy()
    context.user_data[f"{user_id}_meme_battle_winners"] = []
    context.user_data[f"{user_id}_meme_battle_round"] = 1
    context.user_data[f"{user_id}_meme_battle_message_id"] = None

    await _send_next_meme_pair(update, context)


async def _send_next_meme_pair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    candidates = context.user_data.get(f"{user_id}_meme_battle_candidates", [])
    winners = context.user_data.get(f"{user_id}_meme_battle_winners", [])
    prev_message_id = context.user_data.get(f"{user_id}_meme_battle_message_id")

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 0 –∏–ª–∏ 1 –º–µ–º–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
    if len(candidates) <= 1:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –º–µ–º
        if len(candidates) == 1:
            winners.append(candidates.pop())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–º–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        if len(winners) < 2:
            if len(winners) == 1:
                # –û–±—ä—è–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                await _declare_winner(update, context, winners[0])
                return
            else:
                await update.message.reply_text("–ë–∞—Ç—Ç–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! üò±")
                await _cleanup_battle_data(context, user_id)
                return

        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        context.user_data[f"{user_id}_meme_battle_round"] += 1
        context.user_data[f"{user_id}_meme_battle_candidates"] = winners.copy()
        context.user_data[f"{user_id}_meme_battle_winners"] = []
        candidates = winners.copy()
        random.shuffle(candidates)
        await update.message.reply_text(f"üåÄ –†–ê–£–ù–î {context.user_data[f'{user_id}_meme_battle_round']} –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø! üåÄ")

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –º–µ–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    meme1 = candidates.pop(0)
    meme2 = candidates.pop(0) if len(candidates) > 0 else None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üëâ 1 –ú–µ–º üëà", callback_data="vote_0"),
         InlineKeyboardButton("üëâ 2 –ú–µ–º üëà", callback_data="vote_1")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ç–æ
    media_group = []
    media_group.append(InputMediaPhoto(media=open(meme1, 'rb')))
    if meme2:
        media_group.append(InputMediaPhoto(media=open(meme2, 'rb')))

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if prev_message_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=prev_message_id)
        except:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await context.bot.send_media_group(
        chat_id=update.effective_chat.id,
        media=media_group
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    message_with_buttons = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π –º–µ–º:",
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data[f"{user_id}_meme_battle_current_pair"] = [meme1, meme2] if meme2 else [meme1]
    context.user_data[f"{user_id}_meme_battle_candidates"] = candidates
    context.user_data[f"{user_id}_meme_battle_message_id"] = message_with_buttons.message_id


async def vote_in_battle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    choice = int(query.data.split("_")[1])

    if not context.user_data.get(f'{user_id}_meme_battle_active', False):
        await query.answer("–ë–∞—Ç—Ç–ª —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return

    current_pair = context.user_data.get(f"{user_id}_meme_battle_current_pair", [])
    winners = context.user_data.get(f"{user_id}_meme_battle_winners", [])

    if len(current_pair) < 2:
        winners.append(current_pair[0])
    else:
        winners.append(current_pair[choice])

    context.user_data[f"{user_id}_meme_battle_winners"] = winners

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
    except:
        pass

    await _send_next_meme_pair(update, context)


async def _declare_winner(update: Update, context: ContextTypes.DEFAULT_TYPE, winner_path: str):
    user_id = update.effective_user.id
    winner_data = next((meme for meme in load_db() if meme["file_path"] == winner_path), None)

    if winner_data:
        caption = f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –ë–ê–¢–¢–õ–ê! üèÜ\n–û–ø–∏—Å–∞–Ω–∏–µ: {winner_data['descrition']}"
        await update.message.reply_photo(
            photo=open(winner_path, 'rb'),
            caption=caption
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")

    await _cleanup_battle_data(context, user_id)


async def _cleanup_battle_data(context, user_id):
    keys_to_remove = [
        f'{user_id}_meme_battle_active',
        f'{user_id}_meme_battle_candidates',
        f'{user_id}_meme_battle_winners',
        f'{user_id}_meme_battle_current_pair',
        f'{user_id}_meme_battle_message_id',
        f'{user_id}_meme_battle_round'
    ]
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]



if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("custom", custom_command))
    app.add_handler(CommandHandler("menu", show_buttons))
    app.add_handler(MessageHandler(filters.TEXT, handle_reply_button))
    app.add_handler(CallbackQueryHandler(vote_in_battle, pattern="^vote_"))

    app.run_polling(poll_interval=3)

